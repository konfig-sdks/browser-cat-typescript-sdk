/* tslint:disable */
/* eslint-disable */
/*
BrowserCat API

Providing purr-fect headless browser access via utility endpoints and direct websocket connections.

The version of the OpenAPI document: 1.0.0
Contact: support@browsercat.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiKeysCreateApiKey401Response } from '../models';
// @ts-ignore
import { ApiKeysCreateApiKey403Response } from '../models';
// @ts-ignore
import { ApiKeysCreateApiKey500Response } from '../models';
// @ts-ignore
import { ApiKeysCreateApiKeyResponse } from '../models';
// @ts-ignore
import { ApiKeysGetKey401Response } from '../models';
// @ts-ignore
import { ApiKeysGetKey403Response } from '../models';
// @ts-ignore
import { ApiKeysGetKey404Response } from '../models';
// @ts-ignore
import { ApiKeysGetKey500Response } from '../models';
// @ts-ignore
import { ApiKeysGetKeyResponse } from '../models';
// @ts-ignore
import { ApiKeysListAll401Response } from '../models';
// @ts-ignore
import { ApiKeysListAll403Response } from '../models';
// @ts-ignore
import { ApiKeysListAll500Response } from '../models';
// @ts-ignore
import { ApiKeysListAllResponse } from '../models';
// @ts-ignore
import { ApiKeysRevokeKey401Response } from '../models';
// @ts-ignore
import { ApiKeysRevokeKey403Response } from '../models';
// @ts-ignore
import { ApiKeysRevokeKey404Response } from '../models';
// @ts-ignore
import { ApiKeysRevokeKey500Response } from '../models';
// @ts-ignore
import { ApiKeysRevokeKeyResponse } from '../models';
// @ts-ignore
import { ApiKeysUpdateApiKey401Response } from '../models';
// @ts-ignore
import { ApiKeysUpdateApiKey403Response } from '../models';
// @ts-ignore
import { ApiKeysUpdateApiKey404Response } from '../models';
// @ts-ignore
import { ApiKeysUpdateApiKey500Response } from '../models';
// @ts-ignore
import { ApiKeysUpdateApiKeyResponse } from '../models';
// @ts-ignore
import { ApiKeysUpdateKey401Response } from '../models';
// @ts-ignore
import { ApiKeysUpdateKey403Response } from '../models';
// @ts-ignore
import { ApiKeysUpdateKey404Response } from '../models';
// @ts-ignore
import { ApiKeysUpdateKey500Response } from '../models';
// @ts-ignore
import { ApiKeysUpdateKeyResponse } from '../models';
// @ts-ignore
import { KeyPatch } from '../models';
// @ts-ignore
import { KeyPost } from '../models';
// @ts-ignore
import { KeyPublic } from '../models';
// @ts-ignore
import { KeyPut } from '../models';
// @ts-ignore
import { KeySecret } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ApiKeysApi - axios parameter creator
 * @export
 */
export const ApiKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new API key.
         * @summary Create an API key
         * @param {KeyPost} keyPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: async (keyPost: KeyPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyPost' is not null or undefined
            assertParamExists('createApiKey', 'keyPost', keyPost)
            const localVarPath = `/auth/keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtCookie required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "__SESSION", configuration})
            // authentication keyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Api-Key", keyParamName: "keyHeader", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: keyPost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/keys',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(keyPost, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an API key.
         * @summary Retrieve an API key
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKey: async (keyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('getKey', 'keyId', keyId)
            const localVarPath = `/auth/keys/{keyId}`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId !== undefined ? keyId : `-keyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtCookie required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "__SESSION", configuration})
            // authentication keyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Api-Key", keyParamName: "keyHeader", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/keys/{keyId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all API keys.
         * @summary List API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtCookie required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "__SESSION", configuration})
            // authentication keyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Api-Key", keyParamName: "keyHeader", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/keys',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke an API key.
         * @summary Revoke an API key
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeKey: async (keyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('revokeKey', 'keyId', keyId)
            const localVarPath = `/auth/keys/{keyId}`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId !== undefined ? keyId : `-keyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtCookie required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "__SESSION", configuration})
            // authentication keyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Api-Key", keyParamName: "keyHeader", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/keys/{keyId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an API key.
         * @summary Update an API key
         * @param {string} keyId 
         * @param {KeyPut} keyPut 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey: async (keyId: string, keyPut: KeyPut, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('updateApiKey', 'keyId', keyId)
            // verify required parameter 'keyPut' is not null or undefined
            assertParamExists('updateApiKey', 'keyPut', keyPut)
            const localVarPath = `/auth/keys/{keyId}`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId !== undefined ? keyId : `-keyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtCookie required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "__SESSION", configuration})
            // authentication keyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Api-Key", keyParamName: "keyHeader", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: keyPut,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/keys/{keyId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(keyPut, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch an API key.
         * @summary Patch an API key
         * @param {string} keyId 
         * @param {KeyPatch} keyPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKey: async (keyId: string, keyPatch: KeyPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('updateKey', 'keyId', keyId)
            // verify required parameter 'keyPatch' is not null or undefined
            assertParamExists('updateKey', 'keyPatch', keyPatch)
            const localVarPath = `/auth/keys/{keyId}`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId !== undefined ? keyId : `-keyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtCookie required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "__SESSION", configuration})
            // authentication keyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Api-Key", keyParamName: "keyHeader", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: keyPatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/keys/{keyId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(keyPatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiKeysApi - functional programming interface
 * @export
 */
export const ApiKeysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiKeysApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new API key.
         * @summary Create an API key
         * @param {ApiKeysApiCreateApiKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKey(requestParameters: ApiKeysApiCreateApiKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeySecret>> {
            const keyPost: KeyPost = {
                name: requestParameters.name,
                role: requestParameters.role,
                expiredAt: requestParameters.expiredAt
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(keyPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an API key.
         * @summary Retrieve an API key
         * @param {ApiKeysApiGetKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKey(requestParameters: ApiKeysApiGetKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKey(requestParameters.keyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all API keys.
         * @summary List API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyPublic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Revoke an API key.
         * @summary Revoke an API key
         * @param {ApiKeysApiRevokeKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeKey(requestParameters: ApiKeysApiRevokeKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeKey(requestParameters.keyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an API key.
         * @summary Update an API key
         * @param {ApiKeysApiUpdateApiKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApiKey(requestParameters: ApiKeysApiUpdateApiKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyPublic>> {
            const keyPut: KeyPut = {
                name: requestParameters.name,
                role: requestParameters.role,
                expiredAt: requestParameters.expiredAt
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateApiKey(requestParameters.keyId, keyPut, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Patch an API key.
         * @summary Patch an API key
         * @param {ApiKeysApiUpdateKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateKey(requestParameters: ApiKeysApiUpdateKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyPublic>> {
            const keyPatch: KeyPatch = {
                name: requestParameters.name,
                role: requestParameters.role,
                expiredAt: requestParameters.expiredAt
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateKey(requestParameters.keyId, keyPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiKeysApi - factory interface
 * @export
 */
export const ApiKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiKeysApiFp(configuration)
    return {
        /**
         * Create a new API key.
         * @summary Create an API key
         * @param {ApiKeysApiCreateApiKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey(requestParameters: ApiKeysApiCreateApiKeyRequest, options?: AxiosRequestConfig): AxiosPromise<KeySecret> {
            return localVarFp.createApiKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an API key.
         * @summary Retrieve an API key
         * @param {ApiKeysApiGetKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKey(requestParameters: ApiKeysApiGetKeyRequest, options?: AxiosRequestConfig): AxiosPromise<KeyPublic> {
            return localVarFp.getKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all API keys.
         * @summary List API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(options?: AxiosRequestConfig): AxiosPromise<Array<KeyPublic>> {
            return localVarFp.listAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke an API key.
         * @summary Revoke an API key
         * @param {ApiKeysApiRevokeKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeKey(requestParameters: ApiKeysApiRevokeKeyRequest, options?: AxiosRequestConfig): AxiosPromise<KeyPublic> {
            return localVarFp.revokeKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an API key.
         * @summary Update an API key
         * @param {ApiKeysApiUpdateApiKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey(requestParameters: ApiKeysApiUpdateApiKeyRequest, options?: AxiosRequestConfig): AxiosPromise<KeyPublic> {
            return localVarFp.updateApiKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch an API key.
         * @summary Patch an API key
         * @param {ApiKeysApiUpdateKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKey(requestParameters: ApiKeysApiUpdateKeyRequest, options?: AxiosRequestConfig): AxiosPromise<KeyPublic> {
            return localVarFp.updateKey(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createApiKey operation in ApiKeysApi.
 * @export
 * @interface ApiKeysApiCreateApiKeyRequest
 */
export type ApiKeysApiCreateApiKeyRequest = {
    
} & KeyPost

/**
 * Request parameters for getKey operation in ApiKeysApi.
 * @export
 * @interface ApiKeysApiGetKeyRequest
 */
export type ApiKeysApiGetKeyRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ApiKeysApiGetKey
    */
    readonly keyId: string
    
}

/**
 * Request parameters for revokeKey operation in ApiKeysApi.
 * @export
 * @interface ApiKeysApiRevokeKeyRequest
 */
export type ApiKeysApiRevokeKeyRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ApiKeysApiRevokeKey
    */
    readonly keyId: string
    
}

/**
 * Request parameters for updateApiKey operation in ApiKeysApi.
 * @export
 * @interface ApiKeysApiUpdateApiKeyRequest
 */
export type ApiKeysApiUpdateApiKeyRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ApiKeysApiUpdateApiKey
    */
    readonly keyId: string
    
} & KeyPut

/**
 * Request parameters for updateKey operation in ApiKeysApi.
 * @export
 * @interface ApiKeysApiUpdateKeyRequest
 */
export type ApiKeysApiUpdateKeyRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ApiKeysApiUpdateKey
    */
    readonly keyId: string
    
} & KeyPatch

/**
 * ApiKeysApiGenerated - object-oriented interface
 * @export
 * @class ApiKeysApiGenerated
 * @extends {BaseAPI}
 */
export class ApiKeysApiGenerated extends BaseAPI {
    /**
     * Create a new API key.
     * @summary Create an API key
     * @param {ApiKeysApiCreateApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiGenerated
     */
    public createApiKey(requestParameters: ApiKeysApiCreateApiKeyRequest, options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).createApiKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an API key.
     * @summary Retrieve an API key
     * @param {ApiKeysApiGetKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiGenerated
     */
    public getKey(requestParameters: ApiKeysApiGetKeyRequest, options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).getKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all API keys.
     * @summary List API keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiGenerated
     */
    public listAll(options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).listAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke an API key.
     * @summary Revoke an API key
     * @param {ApiKeysApiRevokeKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiGenerated
     */
    public revokeKey(requestParameters: ApiKeysApiRevokeKeyRequest, options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).revokeKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an API key.
     * @summary Update an API key
     * @param {ApiKeysApiUpdateApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiGenerated
     */
    public updateApiKey(requestParameters: ApiKeysApiUpdateApiKeyRequest, options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).updateApiKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch an API key.
     * @summary Patch an API key
     * @param {ApiKeysApiUpdateKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApiGenerated
     */
    public updateKey(requestParameters: ApiKeysApiUpdateKeyRequest, options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).updateKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
