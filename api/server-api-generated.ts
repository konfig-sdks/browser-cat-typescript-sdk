/* tslint:disable */
/* eslint-disable */
/*
BrowserCat API

Providing purr-fect headless browser access via utility endpoints and direct websocket connections.

The version of the OpenAPI document: 1.0.0
Contact: support@browsercat.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ServerCheckHealthStatus404Response } from '../models';
// @ts-ignore
import { ServerCheckHealthStatus500Response } from '../models';
// @ts-ignore
import { ServerCheckHealthStatusResponse } from '../models';
// @ts-ignore
import { ServerShowMetrics500Response } from '../models';
// @ts-ignore
import { ServerShowMetricsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ServerApi - axios parameter creator
 * @export
 */
export const ServerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lightweight endpoint to check server health.
         * @summary Show server health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkHealthStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/health',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns server metrics in Prometheus format. Use this endpoint to monitor server health.
         * @summary Show server metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMetrics: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metrics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServerApi - functional programming interface
 * @export
 */
export const ServerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServerApiAxiosParamCreator(configuration)
    return {
        /**
         * Lightweight endpoint to check server health.
         * @summary Show server health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkHealthStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServerCheckHealthStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkHealthStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns server metrics in Prometheus format. Use this endpoint to monitor server health.
         * @summary Show server metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showMetrics(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showMetrics(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServerApi - factory interface
 * @export
 */
export const ServerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServerApiFp(configuration)
    return {
        /**
         * Lightweight endpoint to check server health.
         * @summary Show server health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkHealthStatus(options?: AxiosRequestConfig): AxiosPromise<ServerCheckHealthStatusResponse> {
            return localVarFp.checkHealthStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns server metrics in Prometheus format. Use this endpoint to monitor server health.
         * @summary Show server metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showMetrics(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.showMetrics(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServerApiGenerated - object-oriented interface
 * @export
 * @class ServerApiGenerated
 * @extends {BaseAPI}
 */
export class ServerApiGenerated extends BaseAPI {
    /**
     * Lightweight endpoint to check server health.
     * @summary Show server health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApiGenerated
     */
    public checkHealthStatus(options?: AxiosRequestConfig) {
        return ServerApiFp(this.configuration).checkHealthStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns server metrics in Prometheus format. Use this endpoint to monitor server health.
     * @summary Show server metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApiGenerated
     */
    public showMetrics(options?: AxiosRequestConfig) {
        return ServerApiFp(this.configuration).showMetrics(options).then((request) => request(this.axios, this.basePath));
    }
}
