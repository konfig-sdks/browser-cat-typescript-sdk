/* tslint:disable */
/* eslint-disable */
/*
BrowserCat API

Providing purr-fect headless browser access via utility endpoints and direct websocket connections.

The version of the OpenAPI document: 1.0.0
Contact: support@browsercat.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BrowsersEstablishConnection401Response } from '../models';
// @ts-ignore
import { BrowsersEstablishConnection403Response } from '../models';
// @ts-ignore
import { BrowsersEstablishConnection500Response } from '../models';
// @ts-ignore
import { BrowsersEstablishConnectionResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BrowsersApi - axios parameter creator
 * @export
 */
export const BrowsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a websocket connection to a headless browser. Currently only supports Playwright.
         * @summary Connect to a browser
         * @param {'ams' | 'iad' | 'atl' | 'bog' | 'bos' | 'otp' | 'maa' | 'ord' | 'dfw' | 'den' | 'eze' | 'fra' | 'gdl' | 'hkg' | 'jnb' | 'lhr' | 'lax' | 'mad' | 'mia' | 'yul' | 'bom' | 'cdg' | 'phx' | 'qro' | 'gig' | 'sjc' | 'scl' | 'gru' | 'sea' | 'ewr' | 'sin' | 'arn' | 'syd' | 'nrt' | 'yyz' | 'waw'} [region] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        establishConnection: async (region?: 'ams' | 'iad' | 'atl' | 'bog' | 'bos' | 'otp' | 'maa' | 'ord' | 'dfw' | 'den' | 'eze' | 'fra' | 'gdl' | 'hkg' | 'jnb' | 'lhr' | 'lax' | 'mad' | 'mia' | 'yul' | 'bom' | 'cdg' | 'phx' | 'qro' | 'gig' | 'sjc' | 'scl' | 'gru' | 'sea' | 'ewr' | 'sin' | 'arn' | 'syd' | 'nrt' | 'yyz' | 'waw', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtCookie required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "__SESSION", configuration})
            // authentication keyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Api-Key", keyParamName: "keyHeader", configuration })
            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connect',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrowsersApi - functional programming interface
 * @export
 */
export const BrowsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrowsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a websocket connection to a headless browser. Currently only supports Playwright.
         * @summary Connect to a browser
         * @param {BrowsersApiEstablishConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async establishConnection(requestParameters: BrowsersApiEstablishConnectionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.establishConnection(requestParameters.region, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrowsersApi - factory interface
 * @export
 */
export const BrowsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrowsersApiFp(configuration)
    return {
        /**
         * Create a websocket connection to a headless browser. Currently only supports Playwright.
         * @summary Connect to a browser
         * @param {BrowsersApiEstablishConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        establishConnection(requestParameters: BrowsersApiEstablishConnectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.establishConnection(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for establishConnection operation in BrowsersApi.
 * @export
 * @interface BrowsersApiEstablishConnectionRequest
 */
export type BrowsersApiEstablishConnectionRequest = {
    
    /**
    * 
    * @type {'ams' | 'iad' | 'atl' | 'bog' | 'bos' | 'otp' | 'maa' | 'ord' | 'dfw' | 'den' | 'eze' | 'fra' | 'gdl' | 'hkg' | 'jnb' | 'lhr' | 'lax' | 'mad' | 'mia' | 'yul' | 'bom' | 'cdg' | 'phx' | 'qro' | 'gig' | 'sjc' | 'scl' | 'gru' | 'sea' | 'ewr' | 'sin' | 'arn' | 'syd' | 'nrt' | 'yyz' | 'waw'}
    * @memberof BrowsersApiEstablishConnection
    */
    readonly region?: 'ams' | 'iad' | 'atl' | 'bog' | 'bos' | 'otp' | 'maa' | 'ord' | 'dfw' | 'den' | 'eze' | 'fra' | 'gdl' | 'hkg' | 'jnb' | 'lhr' | 'lax' | 'mad' | 'mia' | 'yul' | 'bom' | 'cdg' | 'phx' | 'qro' | 'gig' | 'sjc' | 'scl' | 'gru' | 'sea' | 'ewr' | 'sin' | 'arn' | 'syd' | 'nrt' | 'yyz' | 'waw'
    
}

/**
 * BrowsersApiGenerated - object-oriented interface
 * @export
 * @class BrowsersApiGenerated
 * @extends {BaseAPI}
 */
export class BrowsersApiGenerated extends BaseAPI {
    /**
     * Create a websocket connection to a headless browser. Currently only supports Playwright.
     * @summary Connect to a browser
     * @param {BrowsersApiEstablishConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrowsersApiGenerated
     */
    public establishConnection(requestParameters: BrowsersApiEstablishConnectionRequest = {}, options?: AxiosRequestConfig) {
        return BrowsersApiFp(this.configuration).establishConnection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
