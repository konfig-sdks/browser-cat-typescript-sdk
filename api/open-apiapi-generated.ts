/* tslint:disable */
/* eslint-disable */
/*
BrowserCat API

Providing purr-fect headless browser access via utility endpoints and direct websocket connections.

The version of the OpenAPI document: 1.0.0
Contact: support@browsercat.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OpenApiExploreFunctionality500Response } from '../models';
// @ts-ignore
import { OpenApiGetSpecJson500Response } from '../models';
// @ts-ignore
import { OpenApiGetSpecJsonResponse } from '../models';
// @ts-ignore
import { OpenApiGetYamlSpec500Response } from '../models';
// @ts-ignore
import { OpenApiGetYamlSpecResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OpenAPIApi - axios parameter creator
 * @export
 */
export const OpenAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Open OpenAPI docs explorer. Easily explore functionality, request formats, and response types.
         * @summary Open OpenAPI docs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exploreFunctionality: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/openapi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/openapi',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve API spec in JSON format. Use this format to generate types, clients, and mocks in your language of choice.
         * @summary Retrieve API spec as JSON
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecJson: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/openapi.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/openapi.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve API spec in YAML format. Use this format to generate types, clients, and mocks in your language of choice.
         * @summary Retrieve API spec as YAML
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getYamlSpec: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/openapi.yaml`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/openapi.yaml',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenAPIApi - functional programming interface
 * @export
 */
export const OpenAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * Open OpenAPI docs explorer. Easily explore functionality, request formats, and response types.
         * @summary Open OpenAPI docs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exploreFunctionality(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exploreFunctionality(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve API spec in JSON format. Use this format to generate types, clients, and mocks in your language of choice.
         * @summary Retrieve API spec as JSON
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecJson(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpenApiGetSpecJsonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecJson(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve API spec in YAML format. Use this format to generate types, clients, and mocks in your language of choice.
         * @summary Retrieve API spec as YAML
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getYamlSpec(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpenApiGetYamlSpecResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getYamlSpec(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OpenAPIApi - factory interface
 * @export
 */
export const OpenAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenAPIApiFp(configuration)
    return {
        /**
         * Open OpenAPI docs explorer. Easily explore functionality, request formats, and response types.
         * @summary Open OpenAPI docs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exploreFunctionality(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.exploreFunctionality(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve API spec in JSON format. Use this format to generate types, clients, and mocks in your language of choice.
         * @summary Retrieve API spec as JSON
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecJson(options?: AxiosRequestConfig): AxiosPromise<OpenApiGetSpecJsonResponse> {
            return localVarFp.getSpecJson(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve API spec in YAML format. Use this format to generate types, clients, and mocks in your language of choice.
         * @summary Retrieve API spec as YAML
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getYamlSpec(options?: AxiosRequestConfig): AxiosPromise<OpenApiGetYamlSpecResponse> {
            return localVarFp.getYamlSpec(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OpenAPIApiGenerated - object-oriented interface
 * @export
 * @class OpenAPIApiGenerated
 * @extends {BaseAPI}
 */
export class OpenAPIApiGenerated extends BaseAPI {
    /**
     * Open OpenAPI docs explorer. Easily explore functionality, request formats, and response types.
     * @summary Open OpenAPI docs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenAPIApiGenerated
     */
    public exploreFunctionality(options?: AxiosRequestConfig) {
        return OpenAPIApiFp(this.configuration).exploreFunctionality(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve API spec in JSON format. Use this format to generate types, clients, and mocks in your language of choice.
     * @summary Retrieve API spec as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenAPIApiGenerated
     */
    public getSpecJson(options?: AxiosRequestConfig) {
        return OpenAPIApiFp(this.configuration).getSpecJson(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve API spec in YAML format. Use this format to generate types, clients, and mocks in your language of choice.
     * @summary Retrieve API spec as YAML
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenAPIApiGenerated
     */
    public getYamlSpec(options?: AxiosRequestConfig) {
        return OpenAPIApiFp(this.configuration).getYamlSpec(options).then((request) => request(this.axios, this.basePath));
    }
}
